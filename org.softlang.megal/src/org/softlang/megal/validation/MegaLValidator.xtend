/*
 * generated by Xtext
 */
package org.softlang.megal.validation

import org.eclipse.incquery.runtime.api.IncQueryEngine
import org.eclipse.xtext.validation.Check
import org.softlang.megal.model.Declaration
import org.softlang.megal.model.Entity
import org.softlang.megal.query.AllEntityTypesMatcher

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class MegaLValidator extends AbstractMegaLValidator {

	public static val DISCOURAGED_CONFIGURATION = 'discouragedConfiguration'

	@Check
	def infoStuff(Declaration d) {

		val m = AllEntityTypesMatcher.on(IncQueryEngine.on(d.eResource)).getAllMatches(d, null)

		info('''DET: «m.size»''', null)
	}

	@Check
	def infoNameOfDeclaration(Entity e) {
		val d = e.eContainer as Declaration
		info('''NOD: «d.name»''', null)
	}

//	@Check
//	def discourageConfiguration(Dec model) {
//		if (model.configuration != null)
//			warning('Direct configuration is discouraged', ModelPackage.Literals.MODEL__CONFIGURATION,
//				DISCOURAGED_CONFIGURATION)
//	}
//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
}
